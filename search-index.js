var searchIndex = {};
searchIndex['fftw3'] = {"items":[[0,"","fftw3","High-level bindings to [FFTW3](http://fftw.org/): Fastest Fourier\nTransform in the West."],[2,"FftError","","Errors that can occur while planning or running a fourier transform."],[12,"InsufficientSpace","","The input slice was too long for the the output (elements are\nthe lengths of those respective slices).",0],[12,"FailedPlan","","FFTW returned an error (a null plan) when planning.",0],[3,"c2c_1d","","Perform a complex-to-complex one-dimensional Fourier transform of\n`in_`, writing to `out`."],[0,"plan","","Helpers for managing plans."],[1,"RawPlan","fftw3::plan","A thin wrapper around the internal FFTW plan type, that assists\nwith creation and manages destruction."],[10,"new","","Create a `RawPlan` from the output of `f`.",1],[10,"new_unchecked","","Create a `RawPlan` directly from an `fftw_plan`, with no\nsynchronisation or checks. Prefer `RawPlan::new` where possible.",1],[10,"debug_print","","Print information about the plan to stdout.",1],[10,"execute","","Execute the plan on the data vectors provided while planning.",1],[10,"raw_plan","","Obtain a copy of the internal FFTW plan.",1],[10,"drop","","",1],[0,"lock","fftw3","Some functions in FFTW are not thread-safe, and one should ensure\nthat only one thread is executing these at a time. This module\nprovides a lock for this purpose."],[3,"run","fftw3::lock","Run the given closure inside the critical section of the FFTW\nlock."],[5,"LOCK","","Hold this lock when doing anything thread-unsafe with FFTW."],[10,"fmt","fftw3","",0],[10,"description","","",0],[10,"detail","","",0]],"paths":[[2,"FftError"],[1,"RawPlan"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[3,"zero","","Returns the additive identity, `0`."],[3,"one","","Returns the multiplicative identity, `1`."],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[1,"BigUint","num::bigint","A big unsigned integer type."],[1,"BigInt","","A big signed integer type."],[2,"Sign","","A Sign is a `BigInt`'s composing element."],[12,"Minus","","",0],[12,"NoSign","","",0],[12,"Plus","","",0],[0,"BigDigit","",""],[3,"from_doublebigdigit","num::bigint::BigDigit","Split one `DoubleBigDigit` into two `BigDigit`s."],[3,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[18,"BITS","",""],[18,"BASE","",""],[4,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[4,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[18,"ZERO_BIG_DIGIT","",""],[6,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[9,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[6,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[9,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[6,"RandBigInt","",""],[9,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[9,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[9,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[9,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[9,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"decode","","",4],[10,"encode","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"partial_cmp","","",4],[10,"cmp","","",4],[10,"default","","",4],[10,"hash","","",4],[10,"fmt","","",4],[10,"from_str","","",4],[10,"bitand","","",4],[10,"bitor","","",4],[10,"bitxor","","",4],[10,"shl","","",4],[10,"shr","","",4],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[10,"add","","",4],[10,"sub","","",4],[10,"mul","","",4],[10,"div","","",4],[10,"rem","","",4],[10,"neg","","",4],[10,"checked_add","","",4],[10,"checked_sub","","",4],[10,"checked_mul","","",4],[10,"checked_div","","",4],[10,"div_rem","","",4],[10,"div_floor","","",4],[10,"mod_floor","","",4],[10,"div_mod_floor","","",4],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[10,"divides","","Deprecated, use `is_multiple_of` instead.",4],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[10,"is_even","","Returns `true` if the number is divisible by `2`.",4],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[10,"to_i64","","",4],[10,"to_u64","","",4],[10,"from_i64","","",4],[10,"from_u64","","",4],[10,"to_biguint","","",5],[10,"to_biguint","","",4],[10,"from_str_radix","","Creates and initializes a `BigUint`.",4],[10,"new","","Creates and initializes a `BigUint`.",4],[10,"from_slice","","Creates and initializes a `BigUint`.",4],[10,"parse_bytes","","Creates and initializes a `BigUint`.",4],[10,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[10,"decode","","",0],[10,"encode","","",0],[10,"fmt","","",0],[10,"clone","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"neg","","Negate Sign value.",0],[10,"decode","","",5],[10,"encode","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","",5],[10,"default","","",5],[10,"fmt","","",5],[10,"hash","","",5],[10,"from_str","","",5],[10,"shl","","",5],[10,"shr","","",5],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"abs","","",5],[10,"abs_sub","","",5],[10,"signum","","",5],[10,"is_positive","","",5],[10,"is_negative","","",5],[10,"add","","",5],[10,"sub","","",5],[10,"mul","","",5],[10,"div","","",5],[10,"rem","","",5],[10,"neg","","",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[10,"div_rem","","",5],[10,"div_floor","","",5],[10,"mod_floor","","",5],[10,"div_mod_floor","","",5],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[10,"divides","","Deprecated, use `is_multiple_of` instead.",5],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[10,"is_even","","Returns `true` if the number is divisible by `2`.",5],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[10,"to_i64","","",5],[10,"to_u64","","",5],[10,"from_i64","","",5],[10,"from_u64","","",5],[10,"to_bigint","","",5],[10,"to_bigint","","",4],[10,"from_str_radix","","Creates and initializes a BigInt.",5],[10,"new","","Creates and initializes a BigInt.",5],[10,"from_biguint","","Creates and initializes a `BigInt`.",5],[10,"from_slice","","Creates and initializes a `BigInt`.",5],[10,"parse_bytes","","Creates and initializes a `BigInt`.",5],[10,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[0,"complex","num","Complex numbers."],[1,"Complex","num::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",6],[11,"im","","Imaginary portion of the complex number",6],[4,"Complex32","",""],[4,"Complex64","",""],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Create a new Complex",6],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[10,"scale","","Multiplies `self` by the scalar `t`.",6],[10,"unscale","","Divides `self` by the scalar `t`.",6],[10,"inv","","Returns `1/self`",6],[10,"norm","","Calculate |self|",6],[10,"arg","","Calculate the principal Arg of self.",6],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[10,"from_polar","","Convert a polar representation into a complex number.",6],[10,"add","","",6],[10,"sub","","",6],[10,"mul","","",6],[10,"div","","",6],[10,"neg","","",6],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[3,"div_rem","num::integer","Simultaneous integer division and modulus"],[3,"div_floor","","Floored integer division"],[3,"mod_floor","","Floored integer modulus"],[3,"div_mod_floor","","Simultaneous floored integer division and modulus"],[3,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[3,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[6,"Integer","",""],[9,"div_floor","","Floored integer division.",7],[9,"mod_floor","","Floored integer modulo, satisfying:",7],[9,"gcd","","Greatest Common Divisor (GCD).",7],[9,"lcm","","Lowest Common Multiple (LCM).",7],[9,"divides","","Deprecated, use `is_multiple_of` instead.",7],[9,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[9,"is_even","","Returns `true` if the number is even.",7],[9,"is_odd","","Returns `true` if the number is odd.",7],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[10,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[1,"Range","num::iter","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[10,"clone","","",8],[10,"next","","",8],[10,"size_hint","","",8],[10,"next_back","","",8],[10,"clone","","",9],[10,"next","","",9],[10,"size_hint","","",9],[10,"next_back","","",9],[10,"clone","","",10],[10,"next","","",10],[10,"clone","","",11],[10,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[6,"Num","num::traits","The base trait for numeric types"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",12],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",14],[9,"abs_sub","","The positive difference of two numbers.",14],[9,"signum","","Returns the sign of the number.",14],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[6,"Unsigned","","A trait for values which cannot be negative"],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",15],[9,"max_value","","returns the largest finite number this type can represent",15],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[6,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[1,"Ratio","num::rational","Represents the ratio between 2 numbers."],[4,"Rational","","Alias for a `Ratio` of machine-sized integers."],[4,"Rational32","",""],[4,"Rational64","",""],[4,"BigRational","","Alias for arbitrary precision rationals."],[10,"decode","","",21],[10,"encode","","",21],[10,"hash","","",21],[10,"clone","","",21],[10,"from_integer","","Creates a ratio representing the integer `t`.",21],[10,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[10,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[10,"to_integer","","Converts to an integer.",21],[10,"numer","","Gets an immutable reference to the numerator.",21],[10,"denom","","Gets an immutable reference to the denominator.",21],[10,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[10,"reduced","","Returns a `reduce`d copy of self.",21],[10,"recip","","Returns the reciprocal.",21],[10,"floor","","Rounds towards minus infinity.",21],[10,"ceil","","Rounds towards plus infinity.",21],[10,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[10,"trunc","","Rounds towards zero.",21],[10,"fract","","Returns the fractional part of a number.",21],[10,"from_float","","Converts a float into a rational number.",21],[10,"eq","","",21],[10,"ne","","",21],[10,"lt","","",21],[10,"gt","","",21],[10,"le","","",21],[10,"ge","","",21],[10,"partial_cmp","","",21],[10,"cmp","","",21],[10,"mul","","",21],[10,"div","","",21],[10,"add","","",21],[10,"sub","","",21],[10,"rem","","",21],[10,"neg","","",21],[10,"zero","","",21],[10,"is_zero","","",21],[10,"one","","",21],[10,"abs","","",21],[10,"abs_sub","","",21],[10,"signum","","",21],[10,"is_positive","","",21],[10,"is_negative","","",21],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[10,"from_str","","Parses `numer/denom` or just `numer`.",21],[10,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[2,"Sign"],[6,"ToBigUint"],[6,"ToBigInt"],[6,"RandBigInt"],[1,"BigUint"],[1,"BigInt"],[1,"Complex"],[6,"Integer"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[1,"Ratio"]]};

searchIndex['fftw3-sys'] = {"items":[[0,"","fftw3-sys",""],[1,"Struct_fftw_iodim_do_not_use_me","",""],[1,"Struct_fftw_iodim64_do_not_use_me","",""],[14,"fftw_version","",""],[14,"fftw_cc","",""],[14,"fftw_codelet_optim","",""],[14,"fftwf_version","",""],[14,"fftwf_cc","",""],[14,"fftwf_codelet_optim","",""],[14,"fftwl_version","",""],[14,"fftwl_cc","",""],[14,"fftwl_codelet_optim","",""],[13,"fftw_execute","",""],[13,"fftw_plan_dft","",""],[13,"fftw_plan_dft_1d","",""],[13,"fftw_plan_dft_2d","",""],[13,"fftw_plan_dft_3d","",""],[13,"fftw_plan_many_dft","",""],[13,"fftw_plan_guru_dft","",""],[13,"fftw_plan_guru_split_dft","",""],[13,"fftw_plan_guru64_dft","",""],[13,"fftw_plan_guru64_split_dft","",""],[13,"fftw_execute_dft","",""],[13,"fftw_execute_split_dft","",""],[13,"fftw_plan_many_dft_r2c","",""],[13,"fftw_plan_dft_r2c","",""],[13,"fftw_plan_dft_r2c_1d","",""],[13,"fftw_plan_dft_r2c_2d","",""],[13,"fftw_plan_dft_r2c_3d","",""],[13,"fftw_plan_many_dft_c2r","",""],[13,"fftw_plan_dft_c2r","",""],[13,"fftw_plan_dft_c2r_1d","",""],[13,"fftw_plan_dft_c2r_2d","",""],[13,"fftw_plan_dft_c2r_3d","",""],[13,"fftw_plan_guru_dft_r2c","",""],[13,"fftw_plan_guru_dft_c2r","",""],[13,"fftw_plan_guru_split_dft_r2c","",""],[13,"fftw_plan_guru_split_dft_c2r","",""],[13,"fftw_plan_guru64_dft_r2c","",""],[13,"fftw_plan_guru64_dft_c2r","",""],[13,"fftw_plan_guru64_split_dft_r2c","",""],[13,"fftw_plan_guru64_split_dft_c2r","",""],[13,"fftw_execute_dft_r2c","",""],[13,"fftw_execute_dft_c2r","",""],[13,"fftw_execute_split_dft_r2c","",""],[13,"fftw_execute_split_dft_c2r","",""],[13,"fftw_plan_many_r2r","",""],[13,"fftw_plan_r2r","",""],[13,"fftw_plan_r2r_1d","",""],[13,"fftw_plan_r2r_2d","",""],[13,"fftw_plan_r2r_3d","",""],[13,"fftw_plan_guru_r2r","",""],[13,"fftw_plan_guru64_r2r","",""],[13,"fftw_execute_r2r","",""],[13,"fftw_destroy_plan","",""],[13,"fftw_forget_wisdom","",""],[13,"fftw_cleanup","",""],[13,"fftw_set_timelimit","",""],[13,"fftw_plan_with_nthreads","",""],[13,"fftw_init_threads","",""],[13,"fftw_cleanup_threads","",""],[13,"fftw_export_wisdom_to_filename","",""],[13,"fftw_export_wisdom_to_file","",""],[13,"fftw_export_wisdom_to_string","",""],[13,"fftw_export_wisdom","",""],[13,"fftw_import_system_wisdom","",""],[13,"fftw_import_wisdom_from_filename","",""],[13,"fftw_import_wisdom_from_file","",""],[13,"fftw_import_wisdom_from_string","",""],[13,"fftw_import_wisdom","",""],[13,"fftw_fprint_plan","",""],[13,"fftw_print_plan","",""],[13,"fftw_malloc","",""],[13,"fftw_alloc_real","",""],[13,"fftw_alloc_complex","",""],[13,"fftw_free","",""],[13,"fftw_flops","",""],[13,"fftw_estimate_cost","",""],[13,"fftw_cost","",""],[13,"fftwf_execute","",""],[13,"fftwf_plan_dft","",""],[13,"fftwf_plan_dft_1d","",""],[13,"fftwf_plan_dft_2d","",""],[13,"fftwf_plan_dft_3d","",""],[13,"fftwf_plan_many_dft","",""],[13,"fftwf_plan_guru_dft","",""],[13,"fftwf_plan_guru_split_dft","",""],[13,"fftwf_plan_guru64_dft","",""],[13,"fftwf_plan_guru64_split_dft","",""],[13,"fftwf_execute_dft","",""],[13,"fftwf_execute_split_dft","",""],[13,"fftwf_plan_many_dft_r2c","",""],[13,"fftwf_plan_dft_r2c","",""],[13,"fftwf_plan_dft_r2c_1d","",""],[13,"fftwf_plan_dft_r2c_2d","",""],[13,"fftwf_plan_dft_r2c_3d","",""],[13,"fftwf_plan_many_dft_c2r","",""],[13,"fftwf_plan_dft_c2r","",""],[13,"fftwf_plan_dft_c2r_1d","",""],[13,"fftwf_plan_dft_c2r_2d","",""],[13,"fftwf_plan_dft_c2r_3d","",""],[13,"fftwf_plan_guru_dft_r2c","",""],[13,"fftwf_plan_guru_dft_c2r","",""],[13,"fftwf_plan_guru_split_dft_r2c","",""],[13,"fftwf_plan_guru_split_dft_c2r","",""],[13,"fftwf_plan_guru64_dft_r2c","",""],[13,"fftwf_plan_guru64_dft_c2r","",""],[13,"fftwf_plan_guru64_split_dft_r2c","",""],[13,"fftwf_plan_guru64_split_dft_c2r","",""],[13,"fftwf_execute_dft_r2c","",""],[13,"fftwf_execute_dft_c2r","",""],[13,"fftwf_execute_split_dft_r2c","",""],[13,"fftwf_execute_split_dft_c2r","",""],[13,"fftwf_plan_many_r2r","",""],[13,"fftwf_plan_r2r","",""],[13,"fftwf_plan_r2r_1d","",""],[13,"fftwf_plan_r2r_2d","",""],[13,"fftwf_plan_r2r_3d","",""],[13,"fftwf_plan_guru_r2r","",""],[13,"fftwf_plan_guru64_r2r","",""],[13,"fftwf_execute_r2r","",""],[13,"fftwf_destroy_plan","",""],[13,"fftwf_forget_wisdom","",""],[13,"fftwf_cleanup","",""],[13,"fftwf_set_timelimit","",""],[13,"fftwf_plan_with_nthreads","",""],[13,"fftwf_init_threads","",""],[13,"fftwf_cleanup_threads","",""],[13,"fftwf_export_wisdom_to_filename","",""],[13,"fftwf_export_wisdom_to_file","",""],[13,"fftwf_export_wisdom_to_string","",""],[13,"fftwf_export_wisdom","",""],[13,"fftwf_import_system_wisdom","",""],[13,"fftwf_import_wisdom_from_filename","",""],[13,"fftwf_import_wisdom_from_file","",""],[13,"fftwf_import_wisdom_from_string","",""],[13,"fftwf_import_wisdom","",""],[13,"fftwf_fprint_plan","",""],[13,"fftwf_print_plan","",""],[13,"fftwf_malloc","",""],[13,"fftwf_alloc_real","",""],[13,"fftwf_alloc_complex","",""],[13,"fftwf_free","",""],[13,"fftwf_flops","",""],[13,"fftwf_estimate_cost","",""],[13,"fftwf_cost","",""],[13,"fftwl_execute","",""],[13,"fftwl_plan_dft","",""],[13,"fftwl_plan_dft_1d","",""],[13,"fftwl_plan_dft_2d","",""],[13,"fftwl_plan_dft_3d","",""],[13,"fftwl_plan_many_dft","",""],[13,"fftwl_plan_guru_dft","",""],[13,"fftwl_plan_guru_split_dft","",""],[13,"fftwl_plan_guru64_dft","",""],[13,"fftwl_plan_guru64_split_dft","",""],[13,"fftwl_execute_dft","",""],[13,"fftwl_execute_split_dft","",""],[13,"fftwl_plan_many_dft_r2c","",""],[13,"fftwl_plan_dft_r2c","",""],[13,"fftwl_plan_dft_r2c_1d","",""],[13,"fftwl_plan_dft_r2c_2d","",""],[13,"fftwl_plan_dft_r2c_3d","",""],[13,"fftwl_plan_many_dft_c2r","",""],[13,"fftwl_plan_dft_c2r","",""],[13,"fftwl_plan_dft_c2r_1d","",""],[13,"fftwl_plan_dft_c2r_2d","",""],[13,"fftwl_plan_dft_c2r_3d","",""],[13,"fftwl_plan_guru_dft_r2c","",""],[13,"fftwl_plan_guru_dft_c2r","",""],[13,"fftwl_plan_guru_split_dft_r2c","",""],[13,"fftwl_plan_guru_split_dft_c2r","",""],[13,"fftwl_plan_guru64_dft_r2c","",""],[13,"fftwl_plan_guru64_dft_c2r","",""],[13,"fftwl_plan_guru64_split_dft_r2c","",""],[13,"fftwl_plan_guru64_split_dft_c2r","",""],[13,"fftwl_execute_dft_r2c","",""],[13,"fftwl_execute_dft_c2r","",""],[13,"fftwl_execute_split_dft_r2c","",""],[13,"fftwl_execute_split_dft_c2r","",""],[13,"fftwl_plan_many_r2r","",""],[13,"fftwl_plan_r2r","",""],[13,"fftwl_plan_r2r_1d","",""],[13,"fftwl_plan_r2r_2d","",""],[13,"fftwl_plan_r2r_3d","",""],[13,"fftwl_plan_guru_r2r","",""],[13,"fftwl_plan_guru64_r2r","",""],[13,"fftwl_execute_r2r","",""],[13,"fftwl_destroy_plan","",""],[13,"fftwl_forget_wisdom","",""],[13,"fftwl_cleanup","",""],[13,"fftwl_set_timelimit","",""],[13,"fftwl_plan_with_nthreads","",""],[13,"fftwl_init_threads","",""],[13,"fftwl_cleanup_threads","",""],[13,"fftwl_export_wisdom_to_filename","",""],[13,"fftwl_export_wisdom_to_file","",""],[13,"fftwl_export_wisdom_to_string","",""],[13,"fftwl_export_wisdom","",""],[13,"fftwl_import_system_wisdom","",""],[13,"fftwl_import_wisdom_from_filename","",""],[13,"fftwl_import_wisdom_from_file","",""],[13,"fftwl_import_wisdom_from_string","",""],[13,"fftwl_import_wisdom","",""],[13,"fftwl_fprint_plan","",""],[13,"fftwl_print_plan","",""],[13,"fftwl_malloc","",""],[13,"fftwl_alloc_real","",""],[13,"fftwl_alloc_complex","",""],[13,"fftwl_free","",""],[13,"fftwl_flops","",""],[13,"fftwl_estimate_cost","",""],[13,"fftwl_cost","",""],[4,"Enum_fftw_r2r_kind_do_not_use_me","",""],[4,"fftw_write_char_func_do_not_use_me","",""],[4,"fftw_read_char_func_do_not_use_me","",""],[4,"fftw_complex","",""],[4,"Struct_fftw_plan_s","",""],[4,"fftw_plan","",""],[4,"fftw_iodim","",""],[4,"fftw_iodim64","",""],[4,"fftw_r2r_kind","",""],[4,"fftw_write_char_func","",""],[4,"fftw_read_char_func","",""],[4,"fftwf_complex","",""],[4,"Struct_fftwf_plan_s","",""],[4,"fftwf_plan","",""],[4,"fftwf_iodim","",""],[4,"fftwf_iodim64","",""],[4,"fftwf_r2r_kind","",""],[4,"fftwf_write_char_func","",""],[4,"fftwf_read_char_func","",""],[4,"fftwl_complex","",""],[4,"Struct_fftwl_plan_s","",""],[4,"fftwl_plan","",""],[4,"fftwl_iodim","",""],[4,"fftwl_iodim64","",""],[4,"fftwl_r2r_kind","",""],[4,"fftwl_write_char_func","",""],[4,"fftwl_read_char_func","",""],[5,"FFTW_FORWARD","",""],[5,"FFTW_BACKWARD","",""],[5,"FFTW_NO_TIMELIMIT","",""],[5,"FFTW_MEASURE","",""],[5,"FFTW_DESTROY_INPUT","",""],[5,"FFTW_UNALIGNED","",""],[5,"FFTW_CONSERVE_MEMORY","",""],[5,"FFTW_EXHAUSTIVE","",""],[5,"FFTW_PRESERVE_INPUT","",""],[5,"FFTW_PATIENT","",""],[5,"FFTW_ESTIMATE","",""],[5,"FFTW_WISDOM_ONLY","",""],[5,"FFTW_R2HC","",""],[5,"FFTW_HC2R","",""],[5,"FFTW_DHT","",""],[5,"FFTW_REDFT00","",""],[5,"FFTW_REDFT01","",""],[5,"FFTW_REDFT10","",""],[5,"FFTW_REDFT11","",""],[5,"FFTW_RODFT00","",""],[5,"FFTW_RODFT01","",""],[5,"FFTW_RODFT10","",""],[5,"FFTW_RODFT11","",""]],"paths":[]};

searchIndex['strided'] = {"items":[[0,"","strided","Strided slices."],[1,"Items","","An iterator over shared references to the elements of a strided\nslice."],[1,"MutItems","","An iterator over mutable references to the elements of a strided\nslice."],[1,"MutStride","","A mutable strided slice. This is equivalent to `&mut [T]`, that\nonly refers to every `n`th `T`."],[1,"MutSubstrides","","An iterator over `n` mutable substrides of a given stride, each of\nwhich points to every `n`th element starting at successive\noffsets."],[1,"Stride","","A shared strided slice. This is equivalent to a `&[T]` that only\nrefers to every `n`th `T`."],[1,"Substrides","","An iterator over `n` shared substrides of a given stride, each of\nwhich points to every `n`th element starting at successive\noffsets."],[10,"next","","",0],[10,"size_hint","","",0],[10,"next_back","","",0],[10,"next","","",1],[10,"size_hint","","",1],[10,"next_back","","",1],[10,"eq","","",2],[10,"partial_cmp","","",2],[10,"cmp","","",2],[10,"fmt","","",2],[10,"new","","Creates a new strided slice directly from a conventional\nslice. The return value has stride 1.",2],[10,"len","","Returns the number of elements accessible in `self`.",2],[10,"stride","","Returns the offset between successive elements of `self` as a\ncount of *elements*, not bytes.",2],[10,"as_mut_ptr","","Returns a pointer to the first element of this strided slice.",2],[10,"reborrow","","Creates a temporary copy of this strided slice.",2],[10,"substrides2_mut","","Breaks this strided slice into two strided slices pointing to\nalternate elements.",2],[10,"substrides_mut","","Returns an iterator over `n` strided subslices of `self` each\npointing to every `n`th element, starting at successive\noffsets.",2],[10,"get_mut","","Returns a reference to the `n`th element of `self`, or `None`\nif `n` is out-of-bounds.",2],[10,"iter_mut","","Returns an iterator over references to each successive element\nof `self`.",2],[10,"into_iter","","Returns an iterator over reference to each successive element\nof `self`, with the maximum possible lifetime.",2],[10,"slice_mut","","Returns a strided slice containing only the elements from\nindices `from` (inclusive) to `to` (exclusive).",2],[10,"slice_from_mut","","Returns a strided slice containing only the elements from\nindex `from` (inclusive).",2],[10,"slice_to_mut","","Returns a strided slice containing only the elements to\nindex `to` (exclusive).",2],[10,"split_at_mut","","Returns two strided slices, the first with elements up to\n`idx` (exclusive) and the second with elements from `idx`.",2],[10,"index_mut","","",2],[10,"deref","","",2],[10,"next","","",3],[10,"size_hint","","",3],[10,"cmp","","",4],[10,"partial_cmp","","",4],[10,"lt","","",4],[10,"le","","",4],[10,"gt","","",4],[10,"ge","","",4],[10,"eq","","",4],[10,"ne","","",4],[10,"clone","","",4],[10,"fmt","","",4],[10,"new","","Creates a new strided slice directly from a conventional\nslice. The return value has stride 1.",4],[10,"len","","Returns the number of elements accessible in `self`.",4],[10,"stride","","Returns the offset between successive elements of `self` as a\ncount of *elements*, not bytes.",4],[10,"as_ptr","","Returns a pointer to the first element of this strided slice.",4],[10,"substrides2","","Breaks this strided slice into two strided slices pointing to\nalternate elements.",4],[10,"substrides","","Returns an iterator over `n` strided subslices of `self` each\npointing to every `n`th element, starting at successive\noffsets.",4],[10,"get","","Returns a reference to the `n`th element of `self`, or `None`\nif `n` is out-of-bounds.",4],[10,"iter","","Returns an iterator over references to each successive element\nof `self`.",4],[10,"slice","","Returns a strided slice containing only the elements from\nindices `from` (inclusive) to `to` (exclusive).",4],[10,"slice_from","","Returns a strided slice containing only the elements from\nindex `from` (inclusive).",4],[10,"slice_to","","Returns a strided slice containing only the elements to\nindex `to` (exclusive).",4],[10,"split_at","","Returns two strided slices, the first with elements up to\n`idx` (exclusive) and the second with elements from `idx`.",4],[10,"index","","",4],[10,"next","","",5],[10,"size_hint","","",5],[10,"as_stride","","",4],[10,"stride","","",4],[10,"as_stride","","",2],[10,"stride","","",2],[10,"as_stride_mut","","",2],[6,"Strided","","Things that can be viewed as a series of equally spaced `T`s in\nmemory."],[9,"as_stride","","",6],[10,"stride","","",6],[6,"MutStrided","","Things that can be viewed as a series of mutable equally spaced\n`T`s in memory."],[9,"as_stride_mut","","",7],[10,"stride","","",6]],"paths":[[1,"Items"],[1,"MutItems"],[1,"MutStride"],[1,"MutSubstrides"],[1,"Stride"],[1,"Substrides"],[6,"Strided"],[6,"MutStrided"]]};

searchIndex['pkg-config'] = {"items":[[0,"","pkg-config",""],[1,"Options","",""],[11,"statik","","",0],[11,"atleast_version","","",0],[3,"find_library","",""],[3,"find_library_opts","",""],[3,"default_options","",""]],"paths":[[1,"Options"]]};

initSearch(searchIndex);
